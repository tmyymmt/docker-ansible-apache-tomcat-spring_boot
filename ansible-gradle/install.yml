---
- name: Setup Rocky Linux 9.3 Environment
  hosts: localhost
  connection: local
  become: yes

  vars:
    oracle_jdk_version: "21.0.1"
    apr_version: "1.7.0"
    apr_util_version: "1.6.3"
    apache_httpd_version: "2.4.60"
    tomcat_version: "10.1.15"

    oracle_jdk_url: "https://download.oracle.com/java/21/archive/jdk-{{ oracle_jdk_version }}_linux-x64_bin.tar.gz"
    apr_url: "https://archive.apache.org/dist/apr/apr-{{ apr_version }}.tar.gz"
    apr_util_url: "https://archive.apache.org/dist/apr/apr-util-{{ apr_util_version }}.tar.gz"
    apache_httpd_url: "https://archive.apache.org/dist/httpd/httpd-{{ apache_httpd_version }}.tar.gz"
    tomcat_url: "https://archive.apache.org/dist/tomcat/tomcat-10/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"

  tasks:
    - name: Install required packages
      block:
        - name: Install packages via dnf
          dnf:
            name:
              - openssl-devel
              - gcc
              - make
              - pcre
              - pcre-devel
              - expat-devel
              - wget
              - w3m
              - emacs
            state: present

    - name: Install Oracle JDK
      block:
        - name: Download Oracle JDK
          get_url:
            url: "{{ oracle_jdk_url }}"
            dest: /usr/local/src/jdk-{{ oracle_jdk_version }}.tar.gz

        - name: Extract Oracle JDK
          unarchive:
            src: /usr/local/src/jdk-{{ oracle_jdk_version }}.tar.gz
            dest: /usr/local
            remote_src: yes

        - name: Set JAVA_HOME
          lineinfile:
            path: /etc/profile.d/java.sh
            line: 'export JAVA_HOME=/usr/local/jdk-{{ oracle_jdk_version }}'
            create: yes

        - name: Set JAVA PATH
          lineinfile:
            path: /etc/profile.d/java.sh
            line: 'export PATH=$PATH:$JAVA_HOME/bin'
            create: yes

    - name: Build and install APR
      block:
        - name: Download APR
          get_url:
            url: "{{ apr_url }}"
            dest: /usr/local/src/apr-{{ apr_version }}.tar.gz

        - name: Extract APR
          unarchive:
            src: /usr/local/src/apr-{{ apr_version }}.tar.gz
            dest: /usr/local/src
            remote_src: yes

        - name: Build and install APR
          shell: |
            cd /usr/local/src/apr-{{ apr_version }}
            ./configure --prefix=/usr/local/apr
            make
            make install

    - name: Build and install APR-Util
      block:
        - name: Download APR-Util
          get_url:
            url: "{{ apr_util_url }}"
            dest: /usr/local/src/apr-util-{{ apr_util_version }}.tar.gz

        - name: Extract APR-Util
          unarchive:
            src: /usr/local/src/apr-util-{{ apr_util_version }}.tar.gz
            dest: /usr/local/src
            remote_src: yes

        - name: Build and install APR-Util
          shell: |
            cd /usr/local/src/apr-util-{{ apr_util_version }}
            ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr
            make
            make install

    - name: Build and install Apache HTTP Server
      block:
        - name: Download Apache HTTP Server
          get_url:
            url: "{{ apache_httpd_url }}"
            dest: /usr/local/src/httpd-{{ apache_httpd_version }}.tar.gz

        - name: Extract Apache HTTP Server
          unarchive:
            src: /usr/local/src/httpd-{{ apache_httpd_version }}.tar.gz
            dest: /usr/local/src
            remote_src: yes

        - name: Build and install Apache HTTP Server
          shell: |
            cd /usr/local/src/httpd-{{ apache_httpd_version }}
            ./configure --prefix=/usr/local/apache --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util --enable-mods-shared=all --enable-ssl --enable-proxy --enable-proxy-http --enable-proxy-ajp
            make
            make install

        - name: Create Apache SSL certificates
          shell: |
            mkdir -p /usr/local/apache/conf/ssl
            openssl req -new -x509 -days 365 -nodes -out /usr/local/apache/conf/ssl/server.crt -keyout /usr/local/apache/conf/ssl/server.key -subj "/C=US/ST=State/L=City/O=Organization/OU=Unit/CN=localhost"

        - name: Configure Apache HTTP Server
          blockinfile:
            path: /usr/local/apache/conf/httpd.conf
            insertafter: EOF
            block: |
              LoadModule proxy_module modules/mod_proxy.so
              LoadModule proxy_http_module modules/mod_proxy_http.so
              LoadModule proxy_ajp_module modules/mod_proxy_ajp.so
              LoadModule ssl_module modules/mod_ssl.so
              SSLRandomSeed startup builtin
              SSLRandomSeed connect builtin
              ServerName localhost
              <VirtualHost *:80>
                Redirect permanent / https://localhost:8443/
              </VirtualHost>
              Listen 443
              <VirtualHost _default_:443>
                SSLEngine on
                SSLCertificateFile /usr/local/apache/conf/ssl/server.crt
                SSLCertificateKeyFile /usr/local/apache/conf/ssl/server.key
                ProxyPass / ajp://localhost:8009/
                ProxyPassReverse / ajp://localhost:8009/
              </VirtualHost>

        - name: Create systemd service for Apache HTTP Server
          copy:
            dest: /etc/systemd/system/httpd.service
            content: |
              [Unit]
              Description=The Apache HTTP Server
              After=network.target

              [Service]
              Type=forking
              ExecStart=/usr/local/apache/bin/apachectl start
              ExecStop=/usr/local/apache/bin/apachectl stop
              ExecReload=/usr/local/apache/bin/apachectl graceful
              PIDFile=/usr/local/apache/logs/httpd.pid
              PrivateTmp=true

              [Install]
              WantedBy=multi-user.target

        - name: Enable and start Apache HTTP Server
          systemd:
            name: httpd
            enabled: yes
            state: started

    - name: Install Tomcat
      block:
        - name: Download Tomcat
          get_url:
            url: "{{ tomcat_url }}"
            dest: /usr/local/src/apache-tomcat-{{ tomcat_version }}.tar.gz

        - name: Extract Tomcat
          unarchive:
            src: /usr/local/src/apache-tomcat-{{ tomcat_version }}.tar.gz
            dest: /usr/local
            remote_src: yes

        - name: Configure Tomcat AJP
          blockinfile:
            path: /usr/local/apache-tomcat-{{ tomcat_version }}/conf/server.xml
            insertafter: '</Engine>'
            block: |
              <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" secretRequired="false" />

        - name: Create systemd service for Tomcat
          copy:
            dest: /etc/systemd/system/tomcat.service
            content: |
              [Unit]
              Description=Apache Tomcat Web Application Container
              After=network.target

              [Service]
              Type=forking
              Environment=JAVA_HOME=/usr/local/jdk-{{ oracle_jdk_version }}
              Environment=CATALINA_PID=/usr/local/apache-tomcat-{{ tomcat_version }}/temp/tomcat.pid
              Environment=CATALINA_HOME=/usr/local/apache-tomcat-{{ tomcat_version }}
              Environment=CATALINA_BASE=/usr/local/apache-tomcat-{{ tomcat_version }}
              ExecStart=/usr/local/apache-tomcat-{{ tomcat_version }}/bin/startup.sh
              ExecStop=/usr/local/apache-tomcat-{{ tomcat_version }}/bin/shutdown.sh
              User=root
              Group=root
              UMask=0007
              RestartSec=10
              Restart=always

              [Install]
              WantedBy=multi-user.target

        - name: Enable and start Tomcat
          systemd:
            name: tomcat
            enabled: yes
            state: started
